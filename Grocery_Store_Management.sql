CREATE DATABASE Grocery_Store_Management;
USE Grocery_Store_Management;
-- 1. Supplier Table
CREATE TABLE IF NOT EXISTS supplier (
    sup_id TINYINT PRIMARY KEY,
    sup_name VARCHAR(255),
    address TEXT
);

-- 2. Categories Table
CREATE TABLE IF NOT EXISTS categories (
    cat_id TINYINT PRIMARY KEY,
    cat_name VARCHAR(255)
);

-- 3. Employees Table
CREATE TABLE IF NOT EXISTS employees (
    emp_id TINYINT PRIMARY KEY,
    emp_name VARCHAR(255),
    hire_date VARCHAR(255)
);

-- 4. Customers Table
CREATE TABLE IF NOT EXISTS customers (
    cust_id SMALLINT PRIMARY KEY,
    cust_name VARCHAR(255),
    address TEXT
);

-- 5. Products Table
CREATE TABLE IF NOT EXISTS products (
    prod_id TINYINT PRIMARY KEY,
    prod_name VARCHAR(255),
    sup_id TINYINT,
    cat_id TINYINT,
    price DECIMAL(10,2),
    FOREIGN KEY (sup_id) REFERENCES supplier(sup_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (cat_id) REFERENCES categories(cat_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);

-- 6. Orders Table
CREATE TABLE IF NOT EXISTS orders (
    ord_id SMALLINT PRIMARY KEY,
    cust_id SMALLINT,
    emp_id TINYINT,
    order_date VARCHAR(255),
    FOREIGN KEY (cust_id) REFERENCES customers(cust_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (emp_id) REFERENCES employees(emp_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);

-- 7. Order_Details Table
CREATE TABLE IF NOT EXISTS order_details (
    ord_detID SMALLINT AUTO_INCREMENT PRIMARY KEY,
    ord_id SMALLINT,
    prod_id TINYINT,
    quantity TINYINT,
    each_price DECIMAL(10,2),
    total_price DECIMAL(10,2),
    FOREIGN KEY (ord_id) REFERENCES orders(ord_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (prod_id) REFERENCES products(prod_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);

SHOW TABLES;
SELECT * FROM CATEGORIES;
SELECT * FROM CUSTOMERS;
SELECT * FROM EMPLOYEES;
SELECT * FROM ORDER_DETAILS;
SELECT * FROM ORDERS;
SELECT * FROM PRODUCTS;
SELECT * FROM SUPPLIER;

-- 1️. Customer Insights
-- Gain an understanding of customer engagement and purchasing behavior.
-- How many unique customers have placed orders?

SELECT  COUNT(DISTINCT C.CUST_ID) AS UNIQUE_CUSTOMERS FROM CUSTOMERS C
JOIN ORDERS O
ON C.CUST_ID=O.CUST_ID;


-- Which customers have placed the highest number of orders?

SELECT C.CUST_ID,C.CUST_NAME,COUNT(O.ORD_ID) AS NO_OF_ORDERS FROM CUSTOMERS C
JOIN ORDERS O
ON C.CUST_ID=O.CUST_ID
group by C.CUST_ID
order by NO_OF_ORDERS desc
LIMIT 1;

-- What is the total and average purchase value per customer?
SELECT C.CUST_ID,C.CUST_NAME,AVG(K.TOTAL_PRICE) AS AVG_PURCHAGE_VALUE_PER_CUSTOMER,SUM(K.total_price) AS TOTAL_PURCHASE_VALUE_PER_CUSTOMER
FROM CUSTOMERS C 
JOIN ORDERS O
ON C.CUST_ID=O.CUST_ID
JOIN ORDER_DETAILS K
ON O.ORD_ID=K.ORD_ID
group by C.CUST_ID
order by CUST_ID;

-- Who are the top 5 customers by total purchase amount?

SELECT C.CUST_ID,C.CUST_NAME,SUM(K.total_price) AS TOTAL_PURCHASE_VALUE_PER_CUSTOMER
FROM CUSTOMERS C 
JOIN ORDERS O
ON C.CUST_ID=O.CUST_ID
JOIN ORDER_DETAILS K
ON O.ORD_ID=K.ORD_ID
group by C.CUST_ID
order by TOTAL_PURCHASE_VALUE_PER_CUSTOMER DESC
LIMIT 5;

-- 2. Product Performance
-- Evaluate how well products are performing in terms of sales and revenue.
-- How many products exist in each category?

SELECT P.CAT_ID,C.CAT_NAME,COUNT(P.PROD_NAME) AS NO_OF_PRODUCTS
FROM PRODUCTS P
JOIN CATEGORIES C ON
C.CAT_ID=P.CAT_ID
GROUP BY P.CAT_ID;

-- What is the average price of products by category?
SELECT P.CAT_ID,C.CAT_NAME,AVG(PRICE) AS AVG_PRICE
FROM PRODUCTS P
JOIN CATEGORIES C ON
C.CAT_ID=P.CAT_ID
GROUP BY P.CAT_ID;


-- Which products have the highest total sales volume (by quantity)?
SELECT P.PROD_ID,P.PROD_NAME,SUM(O.QUANTITY) AS VOLUME FROM PRODUCTS P
JOIN ORDER_DETAILS O 
ON O.PROD_ID=P.PROD_ID
GROUP BY P.PROD_ID
ORDER BY VOLUME DESC
LIMIT 1;

-- What is the total revenue generated by each product?

SELECT P.PROD_ID,P.PROD_NAME,SUM(TOTAL_PRICE) AS REVENUE FROM PRODUCTS P
JOIN ORDER_DETAILS O 
ON O.PROD_ID=P.PROD_ID
GROUP BY P.PROD_ID;

-- How do product sales vary by category and supplier?
SELECT  C.CAT_NAME,S.SUP_NAME,SUM(O.TOTAL_PRICE) AS TOTAL_SALES  FROM PRODUCTS P 
JOIN SUPPLIER S
ON S.SUP_ID=P.SUP_ID
JOIN CATEGORIES C
ON C.CAT_ID=P.CAT_ID
JOIN ORDER_DETAILS O
ON P.PROD_ID=O.PROD_ID
GROUP BY C.CAT_NAME,S.SUP_NAME
ORDER BY C.CAT_NAME,TOTAL_SALES DESC;

-- 3. Sales and Order Trends
-- Analyze business performance through orders and revenue over time
-- How many orders have been placed in total?
SELECT COUNT(*) AS TOTAL_ORDERS
FROM ORDERS;

-- What is the average value per order?

SELECT AVG(ORDER_TOTAL) AS AVG_ORDER_VALUE
FROM (
    SELECT ORD_ID, SUM(TOTAL_PRICE) AS ORDER_TOTAL
    FROM ORDER_DETAILS
    GROUP BY ORD_ID
) T;


-- On which dates were the most orders placed?

SELECT ORDER_DATE,COUNT(ORD_ID) AS ORDERS_PLACED FROM ORDERS
GROUP BY ORDER_DATE
ORDER BY ORDERS_PLACED DESC
LIMIT 5;


-- What are the monthly trends in order volume and revenue?
SELECT 
    MONTH(STR_TO_DATE(ORDER_DATE, '%m/%d/%Y')) AS MONTH_TREND,SUM(OD.QUANTITY) AS VOLUME,SUM(OD.TOTAL_PRICE) AS REVENUE
FROM ORDERS O
JOIN ORDER_DETAILS OD
ON O.ORD_ID=OD.ORD_ID
GROUP BY MONTH_TREND
ORDER BY MONTH_TREND;

-- How do order patterns vary across weekdays and weekends?
SELECT 
    DAYNAME(STR_TO_DATE(ORDER_DATE, '%m/%d/%Y')) AS WEEKDAY,
    MONTHNAME(STR_TO_DATE(ORDER_DATE, '%m/%d/%Y')) AS MONTH,
    COUNT(ORD_ID) AS TOTAL_ORDERS
FROM ORDERS
GROUP BY WEEKDAY, MONTH
ORDER BY WEEKDAY, MONTH;

-- 4️. Supplier Contribution
-- Identify the most active and profitable suppliers.

-- How many suppliers are there in the database?
SELECT COUNT(*) AS TOTAL_SUPPLIERS FROM SUPPLIER;

-- Which supplier provides the most products?
SELECT S.SUP_ID,S.SUP_NAME,COUNT(P.PROD_NAME) AS NO_OF_PRODUCTS FROM PRODUCTS P 
JOIN SUPPLIER S 
ON S.SUP_ID=P.SUP_ID
GROUP BY S.SUP_ID
ORDER BY NO_OF_PRODUCTS DESC
LIMIT 1;

-- What is the average price of products from each supplier?

SELECT S.SUP_ID,S.SUP_NAME,AVG(OD.EACH_PRICE) AS AVG_PRICE FROM SUPPLIER S 
JOIN PRODUCTS P
ON S.SUP_ID=P.SUP_ID
JOIN ORDER_DETAILS OD ON
OD.PROD_ID=P.PROD_ID
GROUP BY S.SUP_ID;

-- Which suppliers contribute the most to total product sales (by revenue)?

SELECT S.SUP_ID,S.SUP_NAME,SUM(OD.TOTAL_PRICE) AS REVENUE FROM SUPPLIER S 
JOIN PRODUCTS P
ON S.SUP_ID=P.SUP_ID
JOIN ORDER_DETAILS OD ON
OD.PROD_ID=P.PROD_ID
GROUP BY S.SUP_ID
ORDER BY REVENUE DESC 
LIMIT 1;

-- 5️. Employee Performance
-- Assess how employees are handling and influencing sales.

-- How many employees have processed orders?

SELECT COUNT(DISTINCT EMP_ID) AS NO_OF_EMP_PROCESSED_ORDERS FROM ORDERS;

-- Which employees have handled the most orders?

SELECT E.EMP_ID,E.EMP_NAME,COUNT(O.ORD_ID) AS NO_OF_ORDERS 
FROM EMPLOYEES E
JOIN ORDERS O 
ON O.EMP_ID=E.EMP_ID
GROUP BY O.EMP_ID
ORDER BY NO_OF_ORDERS DESC
LIMIT 5;

-- What is the total sales value processed by each employee?

SELECT E.EMP_ID,E.EMP_NAME,SUM(OD.TOTAL_PRICE) AS SALE_VALUE 
FROM EMPLOYEES E 
JOIN ORDERS O
ON O.EMP_ID = E.EMP_ID
JOIN ORDER_DETAILS OD
ON OD.ORD_ID=O.ORD_ID
GROUP BY EMP_ID
ORDER BY E.EMP_ID;

-- What is the average order value handled per employee?

SELECT * FROM EMPLOYEES;
SELECT * FROM ORDER_DETAILS;

SELECT E.EMP_ID,E.EMP_NAME,SUM(OD.TOTAL_PRICE)/COUNT(DISTINCT O.ORD_ID) AS AVG_ORD_VALUE
FROM EMPLOYEES E 
JOIN ORDERS O
ON O.EMP_ID = E.EMP_ID
JOIN ORDER_DETAILS OD
ON OD.ORD_ID=O.ORD_ID
GROUP BY EMP_ID
ORDER BY E.EMP_ID;

-- 6️. Order Details Deep Dive
-- Explore item-level sales patterns and pricing behavior.
-- What is the relationship between quantity ordered and total price?
SELECT QUANTITY,AVG(OD.TOTAL_PRICE) AS AVG_TOTAL_PRICE,
COUNT(*) AS ORDERS_COUNT
FROM ORDER_DETAILS OD
GROUP BY QUANTITY
ORDER BY QUANTITY;

-- What is the average quantity ordered per product?

SELECT P.PROD_ID,P.PROD_NAME,AVG(QUANTITY) AS AVG_QUNT FROM PRODUCTS P 
JOIN ORDER_DETAILS OD
ON P.PROD_ID=OD.PROD_ID
GROUP BY P.PROD_ID
ORDER BY P.PROD_ID;

-- How does the unit price vary across products and orders?

SELECT P.PROD_ID,P.PROD_NAME,OD.EACH_PRICE AS UNIT_PRICE,
COUNT(OD.ORD_ID) AS TIMES_ORDERED
FROM 
PRODUCTS P 
JOIN 
ORDER_DETAILS OD
ON P.PROD_ID=OD.PROD_ID
GROUP BY P.PROD_ID,OD.EACH_PRICE
ORDER BY P.PROD_ID,OD.EACH_PRICE; 



































 




























